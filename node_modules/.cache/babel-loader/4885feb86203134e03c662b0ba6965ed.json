{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\tailwind\\\\src\\\\pages\\\\Login.page.js\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { UserContext } from \"../contexts/user.context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // We are consuming our user-management context to\n  // get & set the user details here\n  const {\n    user,\n    fetchUser,\n    emailPasswordLogin\n  } = useContext(UserContext);\n\n  // We are using React's \"useState\" hook to keep track\n  //  of the form values.\n  const [form, setForm] = useState({\n    email: \"\",\n    password: \"\"\n  });\n\n  // This function will be called whenever the user edits the form.\n  const onFormInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setForm({\n      ...form,\n      [name]: value\n    });\n  };\n\n  // This function will redirect the user to the\n  // appropriate page once the authentication is done.\n  const redirectNow = () => {\n    const redirectTo = location.search.replace(\"?redirectTo=\", \"\");\n    navigate(redirectTo ? redirectTo : \"/\");\n  };\n\n  // Once a user logs in to our app, we don’t want to ask them for their\n  // credentials again every time the user refreshes or revisits our app, \n  // so we are checking if the user is already logged in and\n  // if so we are redirecting the user to the home page.\n  // Otherwise we will do nothing and let the user to login.\n  const loadUser = async () => {\n    if (!user) {\n      const fetchedUser = await fetchUser();\n      if (fetchedUser) {\n        // Redirecting them once fetched.\n        redirectNow();\n      }\n    }\n  };\n\n  // This useEffect will run only once when the component is mounted.\n  // Hence this is helping us in verifying whether the user is already logged in\n  // or not.\n  useEffect(() => {\n    loadUser(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // This function gets fired when the user clicks on the \"Login\" button.\n  const onSubmit = async event => {\n    try {\n      // Here we are passing user details to our emailPasswordLogin\n      // function that we imported from our realm/authentication.js\n      // to validate the user credentials and log in the user into our App.\n      const user = await emailPasswordLogin(form.email, form.password);\n      if (user) {\n        redirectNow();\n      }\n    } catch (error) {\n      if (error.statusCode === 401) {\n        alert(\"Invalid username/password. Try again!\");\n      } else {\n        alert(error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      maxWidth: \"300px\",\n      margin: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      label: \"Username\",\n      type: \"text\",\n      variant: \"outlined\",\n      name: \"email\",\n      value: form.uname,\n      onChange: onFormInputChange,\n      style: {\n        marginBottom: \"1rem\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      label: \"Password\",\n      type: \"password\",\n      variant: \"outlined\",\n      name: \"password\",\n      value: form.password,\n      onChange: onFormInputChange,\n      style: {\n        marginBottom: \"1rem\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: onSubmit,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Don't have an account? \", /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/signup\",\n        children: \"Signup\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"9gls2aPBNlz+Ik/BGlcmZOmn9qY=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["useContext","useEffect","useState","Link","useLocation","useNavigate","UserContext","Login","navigate","location","user","fetchUser","emailPasswordLogin","form","setForm","email","password","onFormInputChange","event","name","value","target","redirectNow","redirectTo","search","replace","loadUser","fetchedUser","onSubmit","error","statusCode","alert","display","flexDirection","maxWidth","margin","uname","marginBottom"],"sources":["C:/Users/Admin/Desktop/tailwind/src/pages/Login.page.js"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { UserContext } from \"../contexts/user.context\";\r\n \r\nconst Login = () => {\r\n const navigate = useNavigate();\r\n const location = useLocation();\r\n \r\n // We are consuming our user-management context to\r\n // get & set the user details here\r\n const { user, fetchUser, emailPasswordLogin } = useContext(UserContext);\r\n \r\n // We are using React's \"useState\" hook to keep track\r\n //  of the form values.\r\n const [form, setForm] = useState({\r\n   email: \"\",\r\n   password: \"\"\r\n });\r\n \r\n // This function will be called whenever the user edits the form.\r\n const onFormInputChange = (event) => {\r\n   const { name, value } = event.target;\r\n   setForm({ ...form, [name]: value });\r\n };\r\n \r\n // This function will redirect the user to the\r\n // appropriate page once the authentication is done.\r\n const redirectNow = () => {\r\n   const redirectTo = location.search.replace(\"?redirectTo=\", \"\");\r\n   navigate(redirectTo ? redirectTo : \"/\");\r\n }\r\n \r\n // Once a user logs in to our app, we don’t want to ask them for their\r\n // credentials again every time the user refreshes or revisits our app, \r\n // so we are checking if the user is already logged in and\r\n // if so we are redirecting the user to the home page.\r\n // Otherwise we will do nothing and let the user to login.\r\n const loadUser = async () => {\r\n   if (!user) {\r\n     const fetchedUser = await fetchUser();\r\n     if (fetchedUser) {\r\n       // Redirecting them once fetched.\r\n       redirectNow();\r\n     }\r\n   }\r\n }\r\n \r\n // This useEffect will run only once when the component is mounted.\r\n // Hence this is helping us in verifying whether the user is already logged in\r\n // or not.\r\n useEffect(() => {\r\n   loadUser(); // eslint-disable-next-line react-hooks/exhaustive-deps\r\n }, []);\r\n \r\n // This function gets fired when the user clicks on the \"Login\" button.\r\n const onSubmit = async (event) => {\r\n   try {\r\n     // Here we are passing user details to our emailPasswordLogin\r\n     // function that we imported from our realm/authentication.js\r\n     // to validate the user credentials and log in the user into our App.\r\n     const user = await emailPasswordLogin(form.email, form.password);\r\n     if (user) {\r\n       redirectNow();\r\n     }\r\n   } catch (error) {\r\n       if (error.statusCode === 401) {\r\n          alert(\"Invalid username/password. Try again!\");\r\n      } else {\r\n          alert(error);\r\n      }\r\n \r\n   }\r\n };\r\n \r\n return <form style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"300px\", margin: \"auto\" }}>\r\n   <h1>Login</h1>\r\n   <input\r\n     label=\"Username\"\r\n     type=\"text\"\r\n     variant=\"outlined\"\r\n     name=\"email\"\r\n     value={form.uname}\r\n     onChange={onFormInputChange}\r\n     style={{ marginBottom: \"1rem\" }}\r\n   />\r\n   <input\r\n     label=\"Password\"\r\n     type=\"password\"\r\n     variant=\"outlined\"\r\n     name=\"password\"\r\n     value={form.password}\r\n     onChange={onFormInputChange}\r\n     style={{ marginBottom: \"1rem\" }}\r\n   />\r\n   <button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\r\n     Login\r\n   </button>\r\n   <p>Don't have an account? <Link to=\"/signup\">Signup</Link></p>\r\n </form>\r\n}\r\n \r\nexport default Login;"],"mappings":"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"},"metadata":{},"sourceType":"module"}